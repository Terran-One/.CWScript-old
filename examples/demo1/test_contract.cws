// line-comments with double slash
// contract definition block
contract CW20 {
	// declare a single error
	error ImproperFormat(user: Addr, input: String)

	// define multiple error definitions using an 'errors' block
	errors {
		// you can now omit the prefixing 'error' keyword
		#[annotations]
		NotEnabled(req_level: enum Levels { #[item] Admin, Student }),
		Unauthorized, // both args () and body {} can be omitted if not needed
		InsufficientFunds(balance: Uint128, needed: Uint128)
	}

	// declare a single event type
	event Action(method: String, owner: String, count: String)

	// like errors, you can define multiple event types in an 'events' block
	events {
		// events don't have {} bodies like errors
		// however I'm planning to support it in the future
		Increment(),
		Reset(method: String)
	}

	// you can define state either as a series of state... statements
	// or grouped into a 'state' block.
	state curr_num: i32 // simple singleton (item mode)
	state balances[Addr]: Uint128 // you can also define maps
	
	// you are most likely going to use the 'state' block
	// as contracts usually need to declare a lot of state and it can get repetitive
	state {
		config: struct ConfigData { // another singleton, with in-place defn
			owner: Addr,
			count: i32,
			fee_percent: Decimal 
		},

		// you can easily make storage with complex deep maps
		// the labels for map keys are mainly for annotation purposes
		// they are optional (see middle)
		token_balances[user: Addr][Addr][bucket: u32]: Uint128	
	}

	// the 'instantiate' logic is here
	instantiate(count: i32, fee_percent: Dec) {
		$state.config = ConfigData {
			owner: $env.sender,
			count: count,
			fee_percent: fee_percent,
		}
		emit! Action("instantiate", $env.sender, count)
	}

	// you define the ExecuteMsg handlers as such:
	exec msg_name_snake_case(arg1: u32, arg2: Option<String>) {
		// you don't need to return anything or write anything here
	}

	exec { // you could also do it like this
		increment() {
			$state.config.count += 1
			if (( $state.config.count )) < 2 {
				Intensity {
					item: 23,
					power23: 722391,
					my_power: ally("call", 12)
				}
			}
		}

		reset(count: i32) {
			if $env.sender != $state.config.owner {
				fail! Unauthorized
			}
			$state.config.count = count
		}
	}

	// we can use inline type declarations to make it more convenient
	query count() -> struct CountResponse { count: i32 } {
		CountResponse { count: $state.config.count }
	}

	query item() -> struct ItemResponse { item: ([int????], &&[Fire::boy], struct Unit, struct Tiger { item: u32? }) }

	// however, we can use another pattern...
	query user_balance_for_token(user: Addr, token: Addr) responds {
		#[echo("hello")] user: Addr = user,
		#[derive(Sata, ansdf)] token: Addr = token,
		balance: Uint128 = $state.token_balances[user][token][1],
	}

	// this is equivalent to:
	query user_balance_for_token(user: Addr, token: Addr) -> struct UserBalanceForTokenResponse { balance: Uint128 } {
		UserBalanceForTokenResponse { balance: $state.token_balances[user][token][1] }
	}

	// such is the power of the contextual type declaration and assignment
}