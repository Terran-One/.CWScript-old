// CWScript Grammar v0.0.2 - 12/5/21

?start: toplevel_stmt*

toplevel_stmt:
    | contract_block

// CONTRACT BLOCK

contract_block: "contract" ident_pascal "{" contract_stmt* "}"

contract_stmt:
    | decl_stmt // declarations

// Declarations

?decl_stmt:
    | decl_error
    | decl_event
    | decl_state
    | decl_instantiate
    | decl_exec
    | decl_query
    | decl_type

decl_error:
    | "error" error_defn
    | "errors" "{" error_defn ("," error_defn)* "}"
error_defn: ident_pascal [fn_args] [fn_body]

decl_event:
    | "event" event_defn
    | "events" "{" event_defn ("," event_defn)* "}"
event_defn: ident_pascal fn_args? fn_body?

decl_state:
    | "state" state_defn
    | "state" "{" state_defn ("," state_defn)* "}"
state_defn:
    | ident ":" type_expr -> item_defn
    | ident decl_map_key+ ":" type_expr -> map_defn
decl_map_key: "[" (ident ":")? type_expr "]"

decl_instantiate: "instantiate" fn_args fn_body

decl_exec:
    | "exec" exec_defn
    | "exec" "{" exec_defn+ "}"
exec_defn: ident fn_args fn_body

decl_query:
    | "query" query_defn
    | "query" "{" query_defn+ "}"
query_defn:
    | ident fn_args "->" type_expr fn_body
    | ident fn_args "->" decl_assign_struct
decl_assign_struct: "@" ident_pascal? "{" (decl_assign_struct_member ("," decl_assign_struct_member)* ","?)? "}"
decl_assign_struct_member: ident ":" type_expr "=" expr

decl_struct:
    | "struct" ident_pascal "{" (decl_struct_member ("," decl_struct_member)* ","?)? "}" -> decl_dict_struct
    | "struct" ident_pascal "(" (decl_struct_member ("," decl_struct_member)*)? ")" -> decl_tuple_struct
    | "struct" ident_pascal -> decl_unit_struct
decl_struct_member: ident ":" type_expr

decl_enum:
    | "enum" ident_pascal "{" (decl_enum_variant ("," decl_enum_variant)* ","?)? "}"
decl_enum_variant:
    | ident_pascal "{" (decl_struct_member ("," decl_struct_member)* ","?)? "}" -> enum_variant_dict
    | ident_pascal "(" (decl_struct_member ("," decl_struct_member)*)? ")" -> enum_variant_tuple
    | ident_pascal -> enum_variant_unit

// FUNCTION SYNTAX

fn_args: "(" (decl_fn_arg ("," decl_fn_arg)*)? ")"
decl_fn_arg: ident ":" type_expr
fn_body: "{" (stmt | expr)* "}"

// STATEMENTS

stmt:
    | expr assign_op expr -> assign_stmt
    | control_flow_stmt
    | "emit!" expr -> emit_stmt
    | "fail!" expr? -> fail_stmt
    | "return" expr? -> return_stmt

!assign_op: "=" | "+=" | "-=" | "*=" | "/=" | "%="

if_expr: "if" expr "{" (stmt|expr)* "}"
else_if_clause: "else" "if" expr "{" (stmt|expr)* "}"
if_else_if_else_expr: if_expr else_if_clause* "else" "{" (stmt|expr)* "}"

control_flow_stmt:
    | if_expr
    | if_else_if_else_expr

// EXPRESSIONS

?expr:
    | "(" expr ")"
    | expr "." ident -> member_access_expr 
    | expr "[" expr "]" -> table_lookup_expr
    | prefix_op expr -> prefix_op_expr
    | expr infix_op expr -> infix_op_expr
    | ident "(" (expr ("," expr)*)? ")" -> fn_call_expr
    | ident
    | value

!prefix_op: "!" | "-"
!infix_op: "*" | "+" | "/" | "%" | "<" | "<=" | ">" | ">=" | "==" | "!=" | "&&" | "||" | "::"

// TYPE SYSTEM

type_expr:
    | ident type_param? -> typename
    | decl_type

decl_type: decl_struct | decl_enum

type_param: "<" type_expr ">"

// VALS

?value:
    | struct
    | vector
    | string
    | integer
    | "true" -> true
    | "false" -> false

struct:
    | ident_pascal "{" (struct_assign ("," struct_assign)* ","?)? "}" -> dict_struct
    | ident_pascal "(" (struct_assign ",")* ")" -> tuple_struct
struct_assign: ident ":" expr

// TERMINALS

// IDENTITIES & SYMBOLS

?ident: /[a-zA-Z_$][a-zA-Z0-9_]*/ // for variable names
?ident_pascal: /[A-Z][a-zA-Z0-9]*/ // start with capital
?ident_snake: /[a-z][a-z0-9_]*/ // start with lowercase

string : ESCAPED_STRING
integer: /[+\-]/? /[1-9][0-9]*/
vector : "[" expr ("," expr)* "]"

COMMENT : /\/\/[^\n]*/
%ignore COMMENT
%import common.ESCAPED_STRING
%import common.WS
%ignore WS